---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;

const { siteLogo, navLinks } = Astro.props;
---

<header class="max-w-5xl mx-auto flex justify-between px-5 py-6 relative border-b border-neutral/20">
  <a href="/" aria-label="Home link">
    <Image
      class="rounded-full"
      src={siteLogo}
      width="45"
      height="45"
      alt="website logo"
    />
  </a>

  <button
    type="button"
    id="menu-button"
    class="sm:hidden text-neutral px-1.5"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <nav
    class="hidden text-neutral border absolute right-5 top-20 bg-black border-neutral/40 py-5 px-4 rounded-xl sm:block sm:border-0 sm:p-0 sm:static sm:bg-transparent"
    id="main-menu"
  >
    <ul class="sm:flex gap-2">
      {
        navLinks.map((link) => (
          <li class="relative">
            <a
              class={`font-medium text-sm p-2 block hover:text-primary nav-item`}
              href={link.href}
              data-nav-link
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", toggleMenu);
  });

  // Función de scroll suave personalizada
  function smoothScroll(targetPosition: number, duration: number = 600) {
    const startPosition = window.pageYOffset;
    const distance = targetPosition - startPosition;
    let startTime: number | null = null;

    function animation(currentTime: number) {
      if (startTime === null) startTime = currentTime;
      const timeElapsed = currentTime - startTime;
      const progress = Math.min(timeElapsed / duration, 1);

      // Función de easing para hacer el scroll más suave
      const easeInOutQuad = (t: number) => {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
      };

      window.scrollTo(0, startPosition + distance * easeInOutQuad(progress));

      if (progress < 1) {
        requestAnimationFrame(animation);
      }
    }

    requestAnimationFrame(animation);
  }

  // Manejador de click para los enlaces de navegación
  document.querySelectorAll('[data-nav-link]').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
      
      if (href?.startsWith('#')) {
        const targetId = href.slice(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          const headerHeight = document.querySelector('header')?.offsetHeight || 0;
          const targetPosition = targetElement.offsetTop - headerHeight;
          
          smoothScroll(targetPosition, 1000); // 1000ms = 1 segundo de duración
        }
      }
    });
  });

  // Manejar el scroll suave después de la carga de la página
  document.addEventListener('astro:page-load', () => {
    const hash = window.location.hash;
    if (hash) {
      const targetElement = document.getElementById(hash.slice(1));
      if (targetElement) {
        const headerHeight = document.querySelector('header')?.offsetHeight || 0;
        const targetPosition = targetElement.offsetTop - headerHeight;
        
        setTimeout(() => {
          smoothScroll(targetPosition, 1000);
        }, 100);
      }
    }
  });
</script>
