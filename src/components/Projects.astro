---
import type { ProjectProps } from "../types";
import Section from "./Section.astro";
import { Image } from "astro:assets";

interface Props {
  projects: ProjectProps[];
}

const { projects } = Astro.props;
---

<Section text="Learning Projects" href="projects">
  {
    projects.map((project) => (
      <div
        class="w-full bg-[#2C2824]/80 text-[#EDE6DA] border border-[#F5D0A9]/20 rounded-xl px-6 py-5 mb-6 shadow-sm transition-all duration-500 opacity-0 translate-y-6 hover:translate-y-0 hover:shadow-md"
        data-scroll-animation
      >
        <h3 class="text-xl font-semibold text-[#F5D0A9] mb-2">
          {project.name}
        </h3>
        <p class="text-sm leading-relaxed mb-4">{project.summary}</p>

        {project.technologies && project.technologies.length > 0 && (
          <div class="flex flex-wrap gap-2 mb-4">
            {project.technologies.map((tech) => (
              <span class="text-xs bg-[#EDE6DA]/10 text-[#F5D0A9] border border-[#F5D0A9]/30 px-2 py-1 rounded-md">
                {tech}
              </span>
            ))}
          </div>
        )}

        <div class="flex gap-4">
          {project.link && (
            <a
              href={project.link}
              target="_blank"
              class="text-sm px-4 py-1.5 bg-[#F5D0A9] text-[#2C2824] rounded-md hover:bg-[#f7cda0] transition"
            >
              Visit Site
            </a>
          )}
          {project.code && (
            <a
              href={project.code}
              target="_blank"
              class="text-sm px-4 py-1.5 border border-[#F5D0A9] text-[#F5D0A9] rounded-md hover:bg-[#F5D0A9]/10 transition"
            >
              GitHub
            </a>
          )}
        </div>
      </div>
    ))
  }
</Section>

<script>
  function setupScrollAnimations() {
    const animatedElements = document.querySelectorAll(
      "[data-scroll-animation]",
    );

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const element = entry.target as HTMLElement;
            element.style.opacity = "1";
            element.style.transform = "translateY(0)";
            observer.unobserve(entry.target);
          }
        });
      },
      {
        root: null,
        threshold: 0.1,
        rootMargin: "-50px",
      },
    );

    animatedElements.forEach((element) => {
      observer.observe(element);
    });
  }

  setupScrollAnimations();
  document.addEventListener("astro:page-load", setupScrollAnimations);
</script>
